# 检查配置文件变动的时间间隔
refresh_rate: 1 seconds
# appender 负责将日志收集到控制台或文件, 可配置多个
appenders:
  stdout:
    kind: console
  info_file:
    # 输出到滚动文件
    kind: rolling_file
    # 日志路径
    path: logs/mactix/info.log
    # 追加模式, 即每次在已有文件末尾添加日志, 默认为 true
    append: true 
    encoder:
      pattern: "[{d(%Y-%m-%d %H:%M:%S)}] [{T}] [{l}] [{t}] [{L}]: {m}{n}"
    policy:
      kind: compound
      # 触发器
      trigger:
        kind: size
        limit: 10 mb
      roller:
        # 固定窗口
        # 每次都往test.log中写入文件，test.log文件达到触发策略时，分割文件后移一位。
        # 即触发时，创建test.1.log文件，原test.1.log文件变为test.2.log文件，依次顺延，但只保留设置的日志数量，多余的删除。
        kind: fixed_window
        # 分割文件名称
        pattern: logs/mactix/info.{d(%Y%m%d)}.{}.log
        # 从1开始
        base: 1
        # 保留五个日志
        count: 10
  error_file:
    # 输出到滚动文件
    kind: rolling_file
    # 日志路径
    path: logs/mactix/err.log
    # 追加模式, 即每次在已有文件末尾添加日志, 默认为 true
    append: true 
    encoder:
      pattern: "[{d(%Y-%m-%d %H:%M:%S)}] [{T}] [h({l})] [{t}] [{L}]: {m}{n}"
    policy:
      kind: compound
      # 触发器
      trigger:
        kind: size
        limit: 10 mb
      roller:
        # 固定窗口
        # 每次都往test.log中写入文件，test.log文件达到触发策略时，分割文件后移一位。
        # 即触发时，创建test.1.log文件，原test.1.log文件变为test.2.log文件，依次顺延，但只保留设置的日志数量，多余的删除。
        kind: fixed_window
        # 分割文件名称
        pattern: logs/mactix/err.{d(%Y%m%d)}.{}.log
        # 从1开始
        base: 1
        # 保留五个日志
        count: 10

# 对全局 log 进行配置
root:
  # 配置输出的日志级别 
  # trace < debug < info < warn < error
  level: info 
  # 配置输出appender
  appenders:
    - stdout
    - info_file
    - error_file

